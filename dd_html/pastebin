
email_in = {
'server': 'imap.gmail.com', 
'port': 993,
'timeout': 5,
'email': '@gmail.com',
'password': '',
'ssl': True
}

statistics = {
'file': 'path to statistcs file/database',
'data_categories': ['mail', 'binary', 'headers', 'request'],
'volume_data_in': 'make function read/write from log file',
'volume_data_out': 'make function read/write from log file'
}

basicLog = {
'level': 'debug', #critical, error, warning, info, debug and none.
'file': 'log/dipdap.log',
#'file': '/dev/stdout', #set to /dev/stdout to print to cosole or pipe.
'format': '%(asctime)s %(name)s <%(levelname)s> %(message)s',
'dateformat': '%m/%d/%Y %I:%M:%S %p'
}









"""
'''
from dipdap import logging_tools
advLog = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'verbose': {
    'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
        'default': {
            'format': '%(asctime)s <%(name)s> %(levelname)s %(message)s'
        }
    },
    'filters': {
        'myfilter': {
            '()': logging_tools.MyFilter,
            'param': 'noshow'
        }
    },
    'handlers': {
        'data_in':{
            # The values below are popped from this dictionary and
            # used to create the handler, set the handler's level and
            # its formatter.
            '()': logging_tools.owned_file_handler,
            'level':'DEBUG',
            'formatter': 'default',
            # The values below are passed to the handler creator callable
            # as keyword arguments.
            'owner': ['pulse', 'pulse'],
            'filename': 'chowntest.log',
            'mode': 'w',
            'encoding': 'utf-8'
        },
        'console': {
            'class': 'logging.StreamHandler',
            'filters': ['myfilter']
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'dipdap.logging_tools.AdminEmailHandler',
            'filters': ['special']
        },
    },
    'loggers': {
        'root': {
            'handlers':['file'],
            'propagate': False,
            'level':'INFO'
        },
        'default': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': False
        },
        'myproject.custom': {
            'handlers': ['console', 'mail_admins'],
            'level': 'INFO',
            'filters': ['special']
        }
    }
}
'''
"""


def sort_list_of_tuples(data, sort_mode):
    """
    Take the x in tuple (x, y) and sort them according to sort_mode.
    Where x and y are strings.

    [1] Alphabetical order.
    [2] Alphabetical order grouped by y.
    [3] By specific pattern

    http://www.pythoncentral.io/how-to-sort-python-dictionaries-by-key-or-value/
    http://www.thegeekstuff.com/2014/06/python-sorted/

    parameters:
        data: list. A list of tuples to be sorted.
        sort_mode: integer. The method of sorting.
        pattern: list. A pattern for sorting tuples.

    return:
        sorted_list: list. A list of the sorted tuples.
    """

    def key_by_name(item):
        return item[1].lower()  # Sort by x with disregard to upper-lower case.

    def key_by_value(item):
        return item[0]

    if sort_mode == "1":

        return sorted(data, key=key_by_name)
        # return sorted(data, key=lambda tup: tup[1])

    elif sort_mode == "2" and len(data) > 0:
        ticker = 0; i = 0; j = 0
        arr = sorted(data, key=key_by_value)
        arr2 = []; arr3 = []; arr4 = []
        tmp_dev = arr[0][0]

        for dev in arr:
            i += 1
            ticker += 1

            if tmp_dev != dev[0]:
                print("Drive %s has %s entries."
                    % (tmp_dev, ticker))
                ticker = 0
                tmp_dev = dev[0]
                arr2 = arr[j:i - 1]
                arr3 = sorted(arr2, key=key_by_name)
                arr4 += arr3
                j = i

        print("Device %s has %s entries."
            % (tmp_dev, ticker))
        arr2 = arr[j:]
        arr3 = sorted(arr2, key=key_by_name)
        arr4 += arr3

        return arr4

    else:

        return None


def stringify_list_of_tuples(data, sort_mode):
    """
    Make strings from tuple pairs according to sorting order.
    [1] Alphabetical order.
    [2] Alphabetical order grouped by device name.

    parameters:
        data: list. A list of tuples to be stringified.
        sort_mode: integer. The method of sorting.

    return:
        entries: list. A list of the stringified entries.
        ticker: integer. A count of all the items listed.
    """
    ticker = 0  # Keep count of the number of entries.
    entries = []

    if sort_mode == "1":

        for item in data:
            ticker += 1
            entries.append("\n" + item[1] + "\t\t" + item[0])

    elif sort_mode == "2":
        tmp_dev = data[0][0]
        entries.append("\n\n\n" + tmp_dev + "\n- - - - - - -")

        for dev in data:
            ticker += 1

            if tmp_dev != dev[0]:
                entries.append("\n\n\n" + dev[0] + "\n- - - - - - -")
                tmp_dev = dev[0]

            entries.append("\n" + dev[1])

    return entries, ticker



def sorting_option():
    """
    Promt for the sorting method of tuple (x, y).
    [1] Alphabetical order of x.
    [2] Alphabetical order of x grouped by y.
    Promt for a description to be written to the new list.

    parameters:
        void.

    return:
        sorting_option: integer. The sorting option code.
        list_file: string. The file which will contain the sorted list.
        description: string. A description for the sorted list.
    """
    print("\nChoose a sorting mode for the new list.\n")
    print("[1] Alphabetical order.")
    print("[2] Alphabetical order grouped by device name.")
    print("[9] Main menu.")

    while True:
        sorting_option = input('Enter option: ')

        if sorting_option in ['1', '2']:

            while True:
                list_file = input('\nGive the new list file a file name: ')    # Use specified or query for new.

                description = input('\nGive the new list a description (or leave blank): \n')

                if list_file != '': break

            return sorting_option, list_file, description

        elif sorting_option == "9": return None, None, None


    /**
     * Get HTML code for a element.
     *
     * @return string HTML code for the element.
     */
    public function getHTML()
    {
        $details = $this->getHTMLDetails();
        extract($details);

        $options = null;
        foreach ($this['options'] as $optValue => $optText) {
            $options .= "<option value='{$optValue}'"
                . (($this['value'] == $optValue)
                    ? " selected"
                    : null)
                . ">{$optText}</option>\n";
        }
    }

        return <<<EOD
<p>
<label for='$id'>$label</label>
<br/>
<select id='$id'{$class}{$name}{$autofocus}{$required}{$readonly}{$checked}{$title}>
{$options}
</select>
{$messages}
</p>
<p class='cf-desc'>{$description}</p>
EOD;
"""

     '''
    %s: <input type="%s" name="%s" id="%s" value="%s" placeholder="%s"/>
   % (label, element_type, name, element_id, value, placeholder)

    <p> Name: <input type="text" name="name" id="name" value=""/></p>
    <p> Street Address: <input type="text" name="st_address" id="st_address" value=""/></p>
    <p> Town: <input type="text" name="town" id="town" value=""/></p>
    <p> County: <input type="text" name="county" id="county" value=""/></p>
    <p> Postcode: <input type="text" name="postcode" id="postcode" value=""/></p>
    <p> Telephone: <input type="text" name="telephone" id="telephone" value=""/></p>
    <p> Fax: <input type="text" name="fax" id="fax" value=""/></p>
    <p> Email: <input type="text" name="email" id="email" value=""/></p>
    <p> Website: <input type="text" name="website" id="website" value=""/></p>
    <br>
    <input type="submit" value="Submit" />
    </form>
</body>

</html>
'''

"""


def walk_device(path_to_device, filesuffix):
    """
    Walk the device's directory tree and add files matching the criteria to list.

    parameters:
        path_to_device: string. Root path to work from.
        filesuffix: string. The file suffixes to list.

    return:
        results: list. The list of all files of specific filesuffix found.
    """
    results = []

    for root, dirnames, filenames in os.walk(path_to_device):

        for filename in fnmatch.filter(filenames, '*.' + filesuffix):
            results.append(os.path.join(root, filename))    

    print("Found %s files with ending: %s"
        % (len(results), filesuffix))

    return results